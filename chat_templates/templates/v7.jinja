{#- Default system message if no system prompt is passed. #}
{%- set default_system_message = '' %}

{#- Begin of sequence token. #}
{{- bos_token }}

{#- Handle system prompt if it exists. #}
{#- System prompt supports text content or text chunks. #}
{%- if messages[0]['role'] == 'system' %}
    {{- '[SYSTEM_PROMPT]' -}}
    {%- if messages[0]['content'] is string %}
        {{- messages[0]['content'] -}}
    {% else %}        
        {%- for block in messages[0]['content'] %}
            {%- if block['type'] == 'text' %}
                {{- block['text'] }}
            {%- else %}
                {{- raise_exception('Only text chunks are supported in system message contents.') }}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
    {{- '[/SYSTEM_PROMPT]' -}}
    {%- set loop_messages = messages[1:] %}
{%- else %}
    {%- set loop_messages = messages %}
    {%- if default_system_message != '' %}
        {{- '[SYSTEM_PROMPT]' + default_system_message + '[/SYSTEM_PROMPT]' }}
    {%- endif %}
{%- endif %}


{#- Tools definition #}
{%- set tools_definition = '' %}
{%- set has_tools = false %}
{%- if tools is defined and tools is not none and tools|length > 0 %}
    {%- set has_tools = true %}
    {%- set tools_definition = '[AVAILABLE_TOOLS]' + (tools| tojson) + '[/AVAILABLE_TOOLS]' %}
{%- endif %}

{#- Checks for alternating user/assistant messages. #}
{%- set ns = namespace() %}
{%- set nu = namespace() %}
{%- set ns.index = 0 %}
{%- set nu.index = -1 %}
{%- for message in loop_messages %}
    {%- if message.role == 'user' or (message.role == 'assistant' and (message.tool_calls is not defined or message.tool_calls is none or message.tool_calls | length == 0)) %}
        {%- if (message['role'] == 'user') != (ns.index % 2 == 0) %}
            {{- raise_exception('After the optional system message, conversation roles must alternate user/assistant/user/assistant/...') }}
        {%- endif %}
        {%- set ns.index = ns.index + 1 %}
        {%- if message.role == 'user' %}
            {%- set nu.index = nu.index + 1 %}
        {%- endif %}
    {%- endif %}
{%- endfor %}

{%- set ns = namespace() %}
{%- set ns.index = 0 %}
{#- Handle conversation messages. #}
{%- for message in loop_messages %}
    {#- User messages supports text content. #}
    {%- if message['role'] == 'user' %}
        {%- if (ns.index == nu.index) and has_tools %}
            {{- tools_definition }}
        {%- endif %}
        {%- if message['content'] is string %}
            {{- '[INST]' + message['content'] + '[/INST]' }}
        {%- else %}
            {{- '[INST]' }}
            {%- for block in message['content'] %}
                {%- if block['type'] == 'text' %}
                    {{- block['text'] }}
                {%- else %}
                    {{- raise_exception('Only text chunks are supported in user message content.') }}
                {%- endif %}
            {%- endfor %}
            {{- '[/INST]' }}
        {%- endif %}

    {#- Assistant messages supports text content or text chunks. #}
    {%- elif message['role'] == 'assistant' %}
        {%- if message['content'] is string and message['content'] != '' %}
            {{- message['content'] }}
            {{- eos_token }}
        {%- elif message['content'] | length > 0 %}
            {%- for block in message['content'] %}
                {%- if block['type'] == 'text' %}
                    {{- block['text'] }}
                {%- else %}
                    {{- raise_exception('Only text chunks are supported in assistant message contents.') }}
                {%- endif %}
            {%- endfor %}
            {#- End of sequence token for each assistant messages. #}
            {{- eos_token }}
        {%- endif %}

        {%- if message['tool_calls'] is defined and message['tool_calls'] is not none and message['tool_calls'] | length > 0 %}
            {{- '[TOOL_CALLS][' }}
            {%- for tool in message['tool_calls'] %}
                {%- set name = tool['function']['name'] %}
                {%- set arguments = tool['function']['arguments'] %}
                {%- set id = tool['id']%}
                {%- if arguments is not string %}
                    {%- set arguments = arguments|tojson|safe %}
                {%- elif arguments == '' %}
                    {%- set arguments = '{}' %}
                {%- endif %}
                {{- '{"name": "' + name + '", "arguments": ' + arguments + ', "id": "' + id + '"}' }}
                {%- if loop.length > 1 and loop.index < loop.length %}
                    {{- ', ' }}
                {%- endif %}
            {%- endfor %}
            {{- ']' }}
            {#- End of sequence token for each assistant messages. #}
            {{- eos_token }}
        {%- endif %}

    {#- Tool messages only supports text content. #}
    {%- elif message['role'] == 'tool' %}
        {%- if message['call_id'] is not undefined and message['call_id'] is not none %}
            {%- set tool_id = message['call_id'] %}
        {%- elif message['tool_call_id'] is not undefined and message['tool_call_id'] is not none %}
            {%- set tool_id = message['tool_call_id'] %}
        {%- else %}
            {{- raise_exception('Tool message must have a call_id or tool_call_id.') }}
        {%- endif %}
        {{- '[TOOL_RESULTS]' + tool_id + '[TOOL_CONTENT]' + message['content']|string + '[/TOOL_RESULTS]' }}

    {#- Raise exception for unsupported roles. #}
    {%- else %}
        {{- raise_exception('Only user, assistant and tool roles are supported, got ' + message['role']) }}
    {%- endif %}
    {%- if message['role'] == 'user' %}
        {%- set ns.index = ns.index + 1 %}
    {%- endif %}
{%- endfor %}
